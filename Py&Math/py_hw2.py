print('\nУпражнение')
# Имеется поток данных о ценах товаров (считайте, что цена всегда больше 0). Необходимо написать алгоритм определения минимального четного числа в этом потоке.
# В качестве усложненного варианта рассмотрите дополнительные условия:
# 1. Список sys_stdin может быть любого размера или условно бесконечным потоком чисел. Т. е. поместить список в оперативную память целиком нельзя.
# 2. Не учитывайте в расчете отрицательные числа и 0 (соответственно, начальное условие о положительной цене отменяется).

sys_stdin = [78, 68, 484, 3, 254, 90, 143, 78, 43, 42, 3053, 473, 5, 8593, 16, 3, 1454, 37, 96, 8547]
tmp_price = []
for i in sys_stdin:
    if i > 0 and i % 2 == 0:
        tmp_price.append(i)
print(min(tmp_price))

# Почему не работает такой вариант?
# sys_stdin = [78, 68, 484, 3, 254, 90, 143, 78, 43, 42, 3053, 473, 5, 8593, 16, 3, 1454, 37, 96, 8547]
# tmp_price = []
# for i in sys_stdin:
#     if i > 0 and i % 2 == 0:
#         tmp_price += i
# print (tmp_price)


print('\nЗадание 1')
# Дан список с визитами по городам и странам. Напишите код, который возвращает отфильтрованный список geo_logs, содержащий только визиты из России.
# Считайте, что список geo_logs легко помещается в оперативной памяти

geo_logs = [
    {'visit1': ['Москва', 'Россия']},
    {'visit2': ['Дели', 'Индия']},
    {'visit3': ['Владимир', 'Россия']},
    {'visit4': ['Лиссабон', 'Португалия']},
    {'visit5': ['Париж', 'Франция']},
    {'visit6': ['Лиссабон', 'Португалия']},
    {'visit7': ['Тула', 'Россия']},
    {'visit8': ['Тула', 'Россия']},
    {'visit9': ['Курск', 'Россия']},
    {'visit10': ['Архангельск', 'Россия']},
]

for visits in geo_logs:
    # print(visits.values())
    for state in dict.values(visits):
        if 'Россия' in state[1]:
            print(visits)



print('\nЗадание 2')
# Выведите на экран все уникальные гео-ID из значений словаря ids. Т. е. список вида [213, 15, 54, 119, 98, 35]

ids = {'user1': [213, 213, 213, 15, 213], 'user2': [54, 54, 119, 119, 119], 'user3': [213, 98, 98, 35]}

list_tmp = []
for ID in ids.values():
    for x in ID:
        list_tmp.append(x)
print(set(list_tmp))


print('\nЗадание 3')
# ¡¡¡ Мне кажется, должен быть более простой вариант !!!

# Список поисковых запросов. Получить распределение количества слов в них. Т. е. поисковых запросов из одного слова 5%, из двух - 7%, из трех - 3% итд.
queries = [
	'смотреть сериалы онлайн',
	'новости спорта',
	'афиша кино',
	'курс доллара',
	'сериалы этим летом',
	'курс по питону',
	'сериалы про спорт',
]

list_line = []
len_request = []
for line in queries:
    list_line.append(line.split())
for words in list_line:
    len_request.append(len(words))
for set_request in set(len_request):
    print ('Поисковых запросов из', set_request, 'слов - ', round(len_request.count(set_request)/len(queries)*100, 2), '%')


print('\nЗадание 4')

# !!!! Подозреваю, что моё решение не самое изящное и оптимальное. Видиться, что постоянная проверка при каждой итерации for максимального значения среди всех значениё словоря не очень оптимально. Как лучше сделать? !!!

# Дана статистика рекламных каналов по объемам продаж. Напишите скрипт, который возвращает название канала с максимальным объемом.
# Т. е. в данном примере скрипт должен возвращать 'yandex'.

stats = {'facebook': 55, 'yandex': 120, 'vk': 115, 'google': 99, 'email': 42, 'ok': 98}

for key, value in stats.items():
    if value == max(stats.values()):
        print(key)


print('\nЗадание 5')

# Дан поток логов по количеству просмотренных страниц для каждого пользователя. Список отсортирован по ID пользователя.
# Вам необходимо написать алгоритм, который считает среднее значение просмотров на пользователя.
# Т. е. надо посчитать отношение суммы всех просмотров к количеству уникальных пользователей.
# Учтите, что весь список stream не помещается в оперативную память, т. е. его нужно обрабатывать поэлементно в цикле.

stream = [
    '2018-01-01,user1,3',
    '2018-01-07,user1,4',
    '2018-03-29,user1,1',
    '2018-04-04,user1,13',
    '2018-01-05,user2,7',
    '2018-06-14,user3,4',
    '2018-07-02,user3,10',
    '2018-03-21,user4,19',
    '2018-03-22,user4,4',
    '2018-04-22,user4,8',
    '2018-05-03,user4,9',
    '2018-05-11,user4,11',
]

view_list = []
for view in stream:
  view_list.append(view.split(','))

user_list = []
total_view = []
for item in view_list:
    user_list.append(item[1])
    total_view.append(int(item[2]))

avg_user_view = sum(total_view) / len(set(user_list))
print ('\nОбщее число пользователей -', len(set(user_list)),
       '\nОбщее число просмотров страниц -', sum(total_view),
       '\nCреднее значение просмотров на пользователя -', avg_user_view)


print('\nЗадание 6')

# Дана статистика рекламных кампаний по дням. Напишите алгоритм, который по паре дата-кампания ищет значение численного столбца.
# Т. е. для даты '2018-01-01' и 'google' нужно получить число 25.
# Считайте, что все комбинации дата-кампания уникальны, а список stats легко помещается в оперативной памяти.

stats = [
    ['2018-01-01', 'google', 25],
    ['2018-01-01', 'yandex', 65],
    ['2018-01-01', 'market', 89],
    ['2018-01-02', 'google', 574],
    ['2018-01-02', 'yandex', 249],
    ['2018-01-02', 'market', 994],
    ['2018-01-03', 'google', 1843],
    ['2018-01-03', 'yandex', 1327],
    ['2018-01-03', 'market', 1764],
]

stats_dict = {}
tmp_list = []
for line in stats:
  tmp_list = line[0], line[1]
  stats_dict.update ({tmp_list: line[2]})

search_value = input('Доступный набор пар:' + str(sorted(stats_dict.keys()))+ '\nЗначение для какого сочетания будем искать? ')

# Не могу понять, почему не рабочий вариант
print(stats_dict.get(search_value, 'Увы, но у такой пары нет значений'))

# В противовес - рабочий вариант с одной из пар: ('2018-01-03', 'market'). Но почему не работает первый, я никак не могу понять. Прошу подсказать.
print(stats_dict.get(('2018-01-03', 'market'), 'Увы, но у такой пары нет значений'))

print ('\nБонусный вариант')

answer = ('Я так понимаю, что решить задачу можно представелнным мной в предыдущей задаче способом, ' \
         'увеличив число аргуметов в ключе, только если разобраться как запустить необходимый поиск значения по введённому условию, но почему у меня ни как разобраться не могу')

print(answer)
