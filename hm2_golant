SELECT ('ФИО: Головань Антон');
-- первый запрос
SELECT * FROM ratings LIMIT 10;

-- второй запрос
SELECT userId, COUNT(*) FROM ratings GROUP BY 1 ORDER BY 2 DESC LIMIT 10;

-- 1.1. SELECT , LIMIT - выбрать 10 записей из таблицы ratings (Для всех дальнейших запросов выбирать по 10 записей, если не указано иное)
SELECT * FROM ratings LIMIT 10;

-- 1.2. WHERE, LIKE - выбрать из таблицы links всё записи, у которых imdbid оканчивается на "42", а поле movieid между 100 и 1000
SELECT * FROM links
WHERE movieid < 1000 AND movieid > 100
AND imdbid LIKE '%42'
LIMIT 10;

-- 2.1. INNER JOIN выбрать из таблицы links все imdbId, которым ставили рейтинг 5
SELECT *
    FROM public.links
    INNER JOIN public.ratings
        ON links.movieid=ratings.movieid
    WHERE rating = '5'
LIMIT 10;

-- 3.1. COUNT() Посчитать число фильмов без оценок
SELECT
    COUNT (links.movieid) AS ratings_quantity
FROM links
LEFT JOIN ratings
ON ratings.movieid = links.movieid
WHERE rating IS null;

-- 3.2 GROUP BY, HAVING вывести top-10 пользователей, у который средний рейтинг выше 3.5
SELECT
    DISTINCT userid,
    AVG (rating) AS avg_rating
FROM ratings
GROUP BY userid
HAVING AVG (rating) > 3.5
ORDER BY avg_rating DESC
LIMIT 10;

-- 4.1 Подзапросы: достать любые 10 imbdId из links у которых средний рейтинг больше 3.5
SELECT
    imdbid,
    movieid
FROM
    links
WHERE
    movieid in (
SELECT movieid
FROM ratings
GROUP BY ratings.movieid
HAVING
    AVG (rating) > 3.5
)
LIMIT 10;

-- 4.2 Common Table Expressions: посчитать средний рейтинг по пользователям, у которых более 10 оценок.
-- Нужно подсчитать средний рейтинг по все пользователям, которые попали под условие - то есть в ответе должно быть одно число.
WITH tmp_table
AS (
    SELECT
        userid,
        COUNT (rating) as mentions
    FROM ratings
    GROUP BY userid
    HAVING COUNT (rating) > 10
    )
SELECT
    AVG (rating) as AVG
FROM ratings
WHERE userid IN
    (SELECT userid FROM tmp_table);
