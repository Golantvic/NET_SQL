SELECT ('ФИО: Головань Антон');
-- первый запрос
SELECT * FROM ratings LIMIT 10;

-- второй запрос
SELECT userId, COUNT(*) FROM ratings GROUP BY 1 ORDER BY 2 DESC LIMIT 10;

-- 1. Вывести список пользователей в формате userId, movieId, normed_rating, avg_rating
SELECT
    userid, movieid,
    CAST ((rating - MIN(rating) OVER (PARTITION BY userid))/(MAX(rating) OVER (PARTITION BY userid) - MIN(rating) OVER (PARTITION BY userid)) AS numeric (6,3)) AS normed_rating,
    CAST (AVG(rating) OVER (PARTITION BY userid) AS numeric (6,3)) AS avg_rating
FROM ratings
    WHERE (SELECT MAX(rating) > MIN(rating) FROM ratings)
LIMIT 30;

-- 2. Extract
ls $NETOLOGY_DATA/raw_data | grep keywords

-- 2. Ответ:
vagrant@ubuntu-bionic:~$ ls $NETOLOGY_DATA/raw_data | grep keywords
keywords.csv
keywords1.csv

-- 3. Напишите команду создания таблички keywords у неё должно быть 2 поля - id(числовой) и tags (текстовое)

psql -c '
    CREATE TABLE IF NOT EXISTS keywords_2 (
    id  bigint,
    tags varchar
  );'

-- из postgres@ubuntu-bionic:~$

psql -c "\\copy keywords_2 FROM '/usr/local/share/netology/raw_data/keywords.csv' DELIMITER ',' CSV HEADER";

-- Проверьте, что в таблице есть записи
postgres=# SELECT  COUNT(*) FROM keywords_2;

-- 4. Transform: Сформируйте запрос (назовём его ЗАПРОС1) к таблице ratings, в котором будут 2 поля -- movieId -- avg_rating - средний рейтинг
SELECT
    movieid,
    CAST (AVG(rating) AS numeric (4,3))  AS avg_rating,
    COUNT(userid) AS users_number
FROM ratings
GROUP BY movieid
    having COUNT(userid) > 50
ORDER BY avg_rating DESC, movieid ASC
LIMIT 150;

-- Воспользуемся Common Table Expressions. Для этого нужно написать ЗАПРОС2, который присоединяет к выборке таблицу keywords
WITH top_rated AS (
SELECT
    movieid,
    CAST (AVG(rating) AS numeric (4,3))  AS avg_rating,
    COUNT(userid) AS users_number
FROM ratings
GROUP BY movieid
    having COUNT(userid) > 50
ORDER BY avg_rating DESC, movieid ASC
)
SELECT *
    FROM top_rated
INNER JOIN keywords_2
    ON top_rated.movieid=keywords_2.id;

-- Load: [ЗАПРОС 3] Теперь мы можем сохранить эту информацию в таблицу для дальнейшего использования >> SELECT 2731
WITH top_rated AS (
SELECT
    movieid,
    CAST (AVG(rating) AS numeric (4,3))  AS avg_rating,
    COUNT(userid) AS users_number
FROM ratings
GROUP BY movieid
    having COUNT(userid) > 50
ORDER BY avg_rating DESC, movieid ASC
)
SELECT
    *
    INTO top_rated_tags
FROM top_rated;

-- Теперь можно выгрузить таблицу в текстовый файл - пример см. в лекции. Внимание: Поля в текстовом файле нужно разделить при помощи табуляции ( символ E\t).
pg_dump -U postgres -t top_rated_tags > top_rated_tags_dump.sql;
